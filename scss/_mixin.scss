@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
@mixin transition($transition) {
  -moz-transition: $transition;
  -o-transition: $transition;
  -ms-transition: $transition;
  -webkit-transition: $transition;
  transition: $transition;
}
@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}
@mixin background-opacity($color, $opacity: 0.5) {
  background: $color;
  background: rgba($color, $opacity);
}
@mixin font_size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

/* MIXIN : LINEAR GRADIENT
 *    EX : @include linear-gradient((90deg, #000 0%, rgba(0,0,0,0) 100%));
 * ------------------------------------------------------------------------- */
 @mixin linear-gradient($value) { 
  background: -webkit-linear-gradient($value);
  background: -moz-linear-gradient($value);
  background: -o-linear-gradient($value);
}


/* MIXIN : MEDIA QUERIES
 *    EX : @include mq( 'lap-and-up' ) { CODE }
 * ------------------------------------------------------------------------- */
$phone: "screen and (max-width: 767px)";
$phone-portrait: "screen and (max-width: 551px)";
$phone-landscape: "screen and (min-width: 552px) and (max-width: 767px)";
$tablet: "screen and (min-width: 768px) and (max-width: 1024px)";
$phone-and-tablet: "screen and (max-width: 1024px)";
$tablet-and-up: "screen and (min-width: 768px)";
$tablet-and-down: "screen and (max-width: 989px)";
$tablet-and-extra-up: "screen and (min-width: 990px)";
$tablet-portrait: "screen and (min-width: 768px) and (max-width: 991px)";
$tablet-up-and-desk-up: "screen and (min-width: 990px) and (max-width: 1378px)";
$desk-up-and-minimize: "screen and (min-width: 1378px) and (max-width: 1400px)";
$tablet-landscape: "screen and (min-width: 992px) and (max-width: 1024px)";
$lap: "screen and (min-width: 1025px) and (max-width: 1199px)";
$lap-and-up: "screen and (min-width: 1025px)";
$desk-and-up: "screen and (min-width: 1200px)";
$desk-and-down: "screen and (max-width: 1199px)";
$large-desk-and-up: "screen and (min-width: 1400px)";
$large-desk-down: "screen and (max-width: 1500px)";
$lap-and-desk: "screen and (min-width: 1025px) and (max-width: 1679px)";
$mobile-down: "screen and (max-width: 420px)";
$xs-mobile: "screen and (max-width: 360px)";

@mixin mq($alias) {
  @if $alias == "phone" {
    @media #{$phone} {
      @content;
    }
  } @else if $alias == "phone-portrait" {
    @media #{$phone-portrait} {
      @content;
    }
  } @else if $alias == "phone-landscape" {
    @media #{$phone-landscape} {
      @content;
    }
  } @else if $alias == "tablet" {
    @media #{$tablet} {
      @content;
    }
  } @else if $alias == "phone-and-tablet" {
    @media #{$phone-and-tablet} {
      @content;
    }
  } @else if $alias == "tablet-and-up" {
    @media #{$tablet-and-up} {
      @content;
    }
  }@else if $alias == "tablet-and-extra-up" {
    @media #{$tablet-and-extra-up} {
      @content;
    }
  } @else if $alias == "tablet-and-down" {
    @media #{$tablet-and-down} {
      @content;
    }
  } @else if $alias == "tablet-portrait" {
    @media #{$tablet-portrait} {
      @content;
    }
  } @else if $alias == "tablet-landscape" {
    @media #{$tablet-landscape} {
      @content;
    }
  } @else if $alias == "lap" {
    @media #{$lap} {
      @content;
    }
  } @else if $alias == "lap-and-up" {
    @media #{$lap-and-up} {
      @content;
    }
  } @else if $alias == "tablet-up-and-desk-up" {
    @media #{$tablet-up-and-desk-up} {
      @content;
    }
  } @else if $alias == "desk-up-and-minimize" {
    @media #{$desk-up-and-minimize} {
      @content;
    }
  }
   @else if $alias == "desk-and-up" {
    @media #{$desk-and-up} {
      @content;
    }
  }@else if $alias == "desk-and-down" {
    @media #{$desk-and-down} {
      @content;
    }
  } @else if $alias == "lap-and-desk" {
    @media #{$lap-and-desk} {
      @content;
    }
  } @else if $alias == "large-desk-and-up" {
    @media #{$large-desk-and-up} {
      @content;
    }
  } @else if $alias == "large-desk-down" {
    @media #{$large-desk-down} {
      @content;
    }
  } @else if $alias == "mobile-down" {
    @media #{$mobile-down} {
      @content;
    }
  } @else if $alias == "xs-mobile" {
    @media #{$xs-mobile} {
      @content;
    }
  } @else {
    @media (#{$alias}) {
      @content;
    }
  }
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex-flow($content) {
  -webkit-box-orient: $content;
  -webkit-box-direction: $content;
  -ms-flex-flow: $content;
  flex-flow: $content;
}
@mixin inline-flex() {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}
@mixin align-items($align){
  -webkit-box-align: $align;
  -webkit-flex-align: $align;
  -ms-flex-align: $align;
  -webkit-align-items: $align;
  align-items: $align;
}
@mixin flex-direction($direction){
  flex-direction: $direction;
  -webkit-flex-direction: $direction;
}
@mixin flex-wrap($wrap){
  flex-wrap: $wrap;
  -webkit-flex-wrap: $wrap;
}

@mixin justify-content($content){
  justify-content: $content;
  -webkit-justify-content: $content;
}
@mixin flex-grow($int: 1) {
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}
@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex: $int;
  flex-shrink: $int;
}
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  flex-basis: $value;
}
@mixin flex($fg: 1, $fs: 0, $fb: auto) {

  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

   -webkit-box: $fg-boxflex;
      -moz-box: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
      -ms-flex: $fg $fs $fb;
          flex: $fg $fs $fb;
}

@mixin truncate($width){
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $width;
}

@mixin backface-visibility($value){
  -webkit-backface-visibility: $value;
  -moz-backface-visibility: $value;
  -ms-backface-visibility: $value;
  -o-backface-visibility: $value;
  backface-visibility: $value;
}